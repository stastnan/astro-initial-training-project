---
import Section from "./Section.astro";
import { actions, isInputError } from "astro:actions";

type FieldErrors = Record<string, string[]>;

const result = Astro.getActionResult(actions.contact);
const errs: FieldErrors = isInputError(result?.error)
  ? result.error.fields
  : {};

const hasError = (k: string) => Array.isArray(errs[k]) && errs[k].length > 0;
const errorText = (k: string) => (hasError(k) ? errs[k].join(" ") : "");
---

<Section>
  <div class="wrapper">
    <h2 class="h">Contact me</h2>
    <p class="description">
      Have a project in mind? Send me a message and I'll get back to you.
    </p>

    {
      result?.data?.ok && (
        <p class="alert success" role="alert" aria-live="polite">
          Thanks! Your message was sent.
        </p>
      )
    }

    {
      result?.error && (
        <p class="alert error" role="alert" aria-live="assertive">
          Please fix the errors below and resubmit.
        </p>
      )
    }

    <form
      method="POST"
      action={actions.contact}
      class="form"
      novalidate
      data-astro-reload
    >
      <label>
        <span>Name</span>
        <input
          transition:persist
          id="name"
          name="name"
          required
          autocomplete="name"
          aria-invalid={hasError("name") ? "true" : undefined}
          aria-describedby={hasError("name") ? "name-error" : undefined}
        />
        {
          hasError("name") && (
            <small id="name-error" class="field-error">
              {errorText("name")}
            </small>
          )
        }
      </label>

      <label>
        <span>Email</span>
        <input
          transition:persist
          id="email"
          type="email"
          name="email"
          required
          autocomplete="email"
          inputmode="email"
          aria-invalid={hasError("email") ? "true" : undefined}
          aria-describedby={hasError("email") ? "email-error" : undefined}
        />
        {
          hasError("email") && (
            <small id="email-error" class="field-error">
              {errorText("email")}
            </small>
          )
        }
      </label>

      <label>
        <span>Message</span>
        <textarea
          transition:persist
          id="message"
          name="message"
          rows="6"
          required
          aria-invalid={hasError("message") ? "true" : undefined}
          aria-describedby={hasError("message") ? "message-error" : undefined}
        ></textarea>
        {
          hasError("message") && (
            <small id="message-error" class="field-error">
              {errorText("message")}
            </small>
          )
        }
      </label>

      <!-- Honeypot (hidden from layout & a11y tree) -->
      <input name="company" hidden tabindex="-1" autocomplete="off" />

      <button class="btn primary" type="submit">Send Message</button>
    </form>
  </div>
</Section>

<style>
  #contact {
    padding: 60px 0;
    border-top: 1px solid #eee;
  }

  .wrapper {
    max-width: 560px;
    margin: 0 auto;
    text-align: center;
  }

  .h {
    margin-bottom: 8px;
    font-size: 32px;
  }

  .description {
    margin-bottom: 20px;
    color: var(--dark);
  }

  .form {
    display: grid;
    gap: 16px;
    margin-top: 20px;
    text-align: left;
  }

  label {
    display: grid;
    gap: 6px;
  }

  input,
  textarea {
    border: 1px solid var(--primary, #444);
    border-radius: 8px;
    padding: 12px 14px;
    font: inherit;
  }

  .btn.primary {
    background: var(--primary);
    color: #fff;
    border: none;
    border-radius: 10px;
    padding: 12px 20px;
    cursor: pointer;
    width: 100%;
    justify-self: stretch;
  }

  .alert {
    margin-top: 12px;
  }

  .success {
    color: #1b8f3a;
  }

  .error {
    color: #c0392b;
  }

  .field-error {
    color: #c0392b;
    font-size: 0.9em;
  }
</style>
